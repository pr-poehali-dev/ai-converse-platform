import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Send, Mic, Bot, Image as ImageIcon } from "lucide-react";
import { Textarea } from "@/components/ui/textarea";
import { Card } from "@/components/ui/card";
import { useToast } from "@/components/ui/use-toast";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";

type MessageType = "text" | "image";

type Message = {
  id: number;
  content: string;
  isUser: boolean;
  timestamp: Date;
  type: MessageType;
};

const exampleTextCommands = [
  "–ù–∞–ø–∏—à–∏ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ –æ –∫–æ—Å–º–æ—Å–µ",
  "–°–æ–∑–¥–∞–π —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –Ω–∞ –Ω–µ–¥–µ–ª—é",
  "–†–∞—Å—Å–∫–∞–∂–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç –æ –∂–∏–≤–æ—Ç–Ω—ã—Ö",
];

const exampleImageCommands = [
  "–ù–∞—Ä–∏—Å—É–π –∑–∞–∫–∞—Ç –Ω–∞ –ø–ª—è–∂–µ",
  "–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –ø–æ—Ä—Ç—Ä–µ—Ç —É—á–µ–Ω–æ–≥–æ –≤ —Å—Ç–∏–ª–µ –∞–∫–≤–∞—Ä–µ–ª—å",
  "–°–æ–∑–¥–∞–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ñ—É—Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞",
];

const ChatInterface = () => {
  const [activeTab, setActiveTab] = useState<"text" | "image">("text");
  const [messages, setMessages] = useState<Message[]>([
    {
      id: 0,
      content: "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ò–ò –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ß–µ–º —è –º–æ–≥—É –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å–µ–≥–æ–¥–Ω—è?",
      isUser: false,
      timestamp: new Date(),
      type: "text",
    },
  ]);
  const [input, setInput] = useState("");
  const { toast } = useToast();

  const formatTime = (date: Date) => {
    return date.toLocaleTimeString([], { hour: "2-digit", minute: "2-digit" });
  };

  const handleSend = () => {
    if (!input.trim()) return;

    const userMessage: Message = {
      id: messages.length,
      content: input,
      isUser: true,
      timestamp: new Date(),
      type: activeTab,
    };

    setMessages((prev) => [...prev, userMessage]);
    setInput("");

    // –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ò–ò
    setTimeout(() => {
      const aiMessage: Message = {
        id: messages.length + 1,
        content: activeTab === "image" ? generateAIImage(input) : generateAIResponse(input),
        isUser: false,
        timestamp: new Date(),
        type: activeTab,
      };
      setMessages((prev) => [...prev, aiMessage]);
    }, 800);
  };

  const textResponses = [
    {
      keywords: ["—Å—Ç–∏—Ö", "–ø–æ—ç–º", "—Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ"],
      response: `–í–æ—Ç —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —è –Ω–∞–ø–∏—Å–∞–ª —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ–±—è:

–í –±–µ—Å–∫—Ä–∞–π–Ω–µ–º –∫–æ—Å–º–æ—Å–µ –ø–∞—Ä–∏–º,
–°—Ä–µ–¥–∏ —Å–æ–∑–≤–µ–∑–¥–∏–π –∏ –ø–ª–∞–Ω–µ—Ç.
–ú—ã —Ç–∞–π–Ω—ã –∑–≤—ë–∑–¥ —Ä–∞—Å–∫—Ä—ã—Ç—å —Ö–æ—Ç–∏–º,
–ò –º—á–∏–º—Å—è –≤–¥–∞–ª—å –∑–∞ –Ω–æ–≤—ã–º —Å–≤–µ—Ç–æ–º.

–í—Å–µ–ª–µ–Ω–Ω–∞—è –≤–æ–∫—Ä—É–≥ –ø–æ—ë—Ç,
–°–∏–º—Ñ–æ–Ω–∏—é –º–∏—Ä–æ–≤ —Ä–æ–∂–¥–∞—è.
–ê –º—ã ‚Äî –ø–µ—Å—á–∏–Ω–∫–∏, —á—Ç–æ –Ω–µ—Å—ë—Ç
–í–æ–ª–Ω–∞ –≤—Ä–µ–º–µ–Ω, –Ω–µ –∑–∞–º–µ—á–∞—è.`,
    },
    {
      keywords: ["—Å–ø–∏—Å–æ–∫", "–ø–æ–∫—É–ø–∫"],
      response: `–í–æ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –Ω–∞ –Ω–µ–¥–µ–ª—é:

üìã –ü—Ä–æ–¥—É–∫—Ç—ã:
- –û–≤–æ—â–∏: –ø–æ–º–∏–¥–æ—Ä—ã, –æ–≥—É—Ä—Ü—ã, –º–æ—Ä–∫–æ–≤—å, –ª—É–∫
- –§—Ä—É–∫—Ç—ã: —è–±–ª–æ–∫–∏, –±–∞–Ω–∞–Ω—ã, –∞–ø–µ–ª—å—Å–∏–Ω—ã
- –ú–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã: –º–æ–ª–æ–∫–æ, —Ç–≤–æ—Ä–æ–≥, —Å—ã—Ä, –π–æ–≥—É—Ä—Ç
- –ú—è—Å–æ/—Ä—ã–±–∞: –∫—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞, –≥–æ–≤—è–¥–∏–Ω–∞, —Ñ–æ—Ä–µ–ª—å
- –ö—Ä—É–ø—ã: —Ä–∏—Å, –≥—Ä–µ—á–∫–∞, –æ–≤—Å—è–Ω–∫–∞
- –•–ª–µ–±–æ–±—É–ª–æ—á–Ω—ã–µ –∏–∑–¥–µ–ª–∏—è: —Ö–ª–µ–±, –ª–∞–≤–∞—à

üì¶ –ë—ã—Ç–æ–≤–∞—è —Ö–∏–º–∏—è:
- –ú–æ—é—â–µ–µ —Å—Ä–µ–¥—Å—Ç–≤–æ –¥–ª—è –ø–æ—Å—É–¥—ã
- –°—Ç–∏—Ä–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ—à–æ–∫
- –ß–∏—Å—Ç—è—â–µ–µ —Å—Ä–µ–¥—Å—Ç–≤–æ –¥–ª—è –≤–∞–Ω–Ω–æ–π

üíä –ê–ø—Ç–µ–∫–∞:
- –í–∏—Ç–∞–º–∏–Ω—ã
- –ü–ª–∞—Å—Ç—ã—Ä–∏`,
    },
    {
      keywords: ["—Ñ–∞–∫—Ç", "–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ", "–∂–∏–≤–æ—Ç–Ω"],
      response: `–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç –æ –∂–∏–≤–æ—Ç–Ω—ã—Ö: –û—Å—å–º–∏–Ω–æ–≥–∏ –∏–º–µ—é—Ç —Ç—Ä–∏ —Å–µ—Ä–¥—Ü–∞! –î–≤–∞ —Å–µ—Ä–¥—Ü–∞ –ø–µ—Ä–µ–∫–∞—á–∏–≤–∞—é—Ç –∫—Ä–æ–≤—å —á–µ—Ä–µ–∑ –∂–∞–±—Ä—ã, –∞ —Ç—Ä–µ—Ç—å–µ —Ü–∏—Ä–∫—É–ª–∏—Ä—É–µ—Ç –µ—ë –ø–æ –≤—Å–µ–º—É —Ç–µ–ª—É. –ö–æ–≥–¥–∞ –æ—Å—å–º–∏–Ω–æ–≥ –ø–ª—ã–≤—ë—Ç, –µ–≥–æ —Ç—Ä–µ—Ç—å–µ —Å–µ—Ä–¥—Ü–µ –ø–µ—Ä–µ—Å—Ç–∞—ë—Ç –±–∏—Ç—å—Å—è, —á—Ç–æ –æ–±—ä—è—Å–Ω—è–µ—Ç, –ø–æ—á–µ–º—É —ç—Ç–∏ —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω—ã–µ —Å—É—â–µ—Å—Ç–≤–∞ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é—Ç –ø–æ–ª–∑–∞—Ç—å, –∞ –Ω–µ –ø–ª–∞–≤–∞—Ç—å - —ç—Ç–æ –º–µ–Ω–µ–µ —ç–Ω–µ—Ä–≥–æ–∑–∞—Ç—Ä–∞—Ç–Ω–æ –¥–ª—è –Ω–∏—Ö.`,
    },
    {
      keywords: ["–ø—Ä–∏–≤–µ—Ç", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π", "–¥–æ–±—Ä—ã–π"],
      response: `–ü—Ä–∏–≤–µ—Ç! –†–∞–¥ —Å–Ω–æ–≤–∞ –æ–±—â–∞—Ç—å—Å—è —Å —Ç–æ–±–æ–π. –ß–µ–º —è –º–æ–≥—É –ø–æ–º–æ—á—å —Å–µ–≥–æ–¥–Ω—è? –ú–æ–≥—É –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç, –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ‚Äî –ø—Ä–æ—Å—Ç–æ —Å–∫–∞–∂–∏, —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ.`,
    },
  ];

  const generateAIResponse = (query: string) => {
    // –ò—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
    for (const item of textResponses) {
      if (item.keywords.some(keyword => query.toLowerCase().includes(keyword))) {
        return item.response;
      }
    }
    
    // –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–æ–ª–µ–µ –æ–±—â–∏–π –æ—Ç–≤–µ—Ç
    const fallbackResponses = [
      `–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –∑–∞–ø—Ä–æ—Å: "${query}". –Ø –æ–±—Ä–∞–±–æ—Ç–∞–ª —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –º–æ–≥—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ —Ä–µ—à–µ–Ω–∏–µ. –ü—Ä–µ–∂–¥–µ –≤—Å–µ–≥–æ, –≤–∞–∂–Ω–æ –ø–æ–Ω–∏–º–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏. –ò—Å—Ö–æ–¥—è –∏–∑ –∏–º–µ—é—â–∏—Ö—Å—è –¥–∞–Ω–Ω—ã—Ö, —è —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –Ω–∞—á–∞—Ç—å —Å –∞–Ω–∞–ª–∏–∑–∞ –∫–ª—é—á–µ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏ –∑–∞—Ç–µ–º –¥–≤–∏–≥–∞—Ç—å—Å—è –∫ –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–º—É —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—é –≤–æ–ø—Ä–æ—Å–∞.`,
      
      `–í–∞—à –≤–æ–ø—Ä–æ—Å –æ "${query}" –≤–µ—Å—å–º–∞ –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω. –ü–æ–∑–≤–æ–ª—å—Ç–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞ —ç—Ç—É —Ç–µ–º—É. –í —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–º –ø–æ–Ω–∏–º–∞–Ω–∏–∏ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –∏–º–µ–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞—Å–ø–µ–∫—Ç–æ–≤, –∫–∞–∂–¥—ã–π –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –∑–∞—Å–ª—É–∂–∏–≤–∞–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è. –Ø –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –æ—Ö–≤–∞—Ç–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã –∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç.`,
      
      `–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É "${query}" —è –º–æ–≥—É –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –≠—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –∑–∞—Ç—Ä–∞–≥–∏–≤–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã—Ö —Ç–µ–º, –∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å–Ω–æ –≤–∑–∞–∏–º–æ—Å–≤—è–∑–∞–Ω—ã. –î–∞–≤–∞–π—Ç–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –∏—Ö –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ, —á—Ç–æ–±—ã —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ —Å–∏—Ç—É–∞—Ü–∏–∏.`,
    ];
    
    return fallbackResponses[Math.floor(Math.random() * fallbackResponses.length)];
  };

  const generateAIImage = (prompt: string) => {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∑–∞–ø—Ä–æ—Å –∫ API –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    // –°–µ–π—á–∞—Å –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º URL —Å Unsplash –ø–æ —Ç–µ–º–µ –∑–∞–ø—Ä–æ—Å–∞
    const keywords = prompt.toLowerCase();
    let imageUrl = "";
    
    if (keywords.includes("–∑–∞–∫–∞—Ç") || keywords.includes("–ø–ª—è–∂")) {
      imageUrl = "https://images.unsplash.com/photo-1507525428034-b723cf961d3e?w=600&auto=format&fit=crop";
    } else if (keywords.includes("–ø–æ—Ä—Ç—Ä–µ—Ç") || keywords.includes("—É—á–µ–Ω")) {
      imageUrl = "https://images.unsplash.com/photo-1568602471122-7832951cc4c5?w=600&auto=format&fit=crop";
    } else if (keywords.includes("–≥–æ—Ä–æ–¥") || keywords.includes("—Ñ—É—Ç—É—Ä–∏—Å—Ç–∏—á")) {
      imageUrl = "https://images.unsplash.com/photo-1519501025264-65ba15a82390?w=600&auto=format&fit=crop";
    } else if (keywords.includes("–ø—Ä–∏—Ä–æ–¥") || keywords.includes("–ª–µ—Å")) {
      imageUrl = "https://images.unsplash.com/photo-1441974231531-c6227db76b6e?w=600&auto=format&fit=crop";
    } else if (keywords.includes("–∂–∏–≤–æ—Ç–Ω") || keywords.includes("–∫–æ—Ç") || keywords.includes("—Å–æ–±–∞–∫")) {
      imageUrl = "https://images.unsplash.com/photo-1526336024174-e58f5cdd8e13?w=600&auto=format&fit=crop";
    } else {
      // –î–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
      imageUrl = "https://images.unsplash.com/photo-1519074069390-a69ea0299a6b?w=600&auto=format&fit=crop";
    }
    
    return `<img src="${imageUrl}" alt="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É: ${prompt}" class="rounded-lg max-w-full" />`;
  };

  const handleKeyDown = (e: React.KeyboardEvent) => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault();
      handleSend();
    }
  };

  const handleVoiceCommand = () => {
    toast({
      title: "–ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥",
      description: "–ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
    });
  };

  const useExampleCommand = (command: string) => {
    setInput(command);
  };

  const renderMessageContent = (message: Message) => {
    if (message.type === "image" && !message.isUser) {
      return <div dangerouslySetInnerHTML={{ __html: message.content }} />;
    }
    return <p className="whitespace-pre-wrap break-words">{message.content}</p>;
  };

  return (
    <div className="flex flex-col h-[calc(100vh-4rem)]">
      <Tabs 
        value={activeTab} 
        onValueChange={(value) => setActiveTab(value as "text" | "image")} 
        className="w-full px-4 pt-2"
      >
        <TabsList className="grid w-[400px] grid-cols-2">
          <TabsTrigger value="text" className="flex items-center gap-2">
            <Bot className="h-4 w-4" />
            –¢–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
          </TabsTrigger>
          <TabsTrigger value="image" className="flex items-center gap-2">
            <ImageIcon className="h-4 w-4" />
            –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
          </TabsTrigger>
        </TabsList>
      </Tabs>

      <div className="flex-1 overflow-y-auto p-4 space-y-4">
        {messages.map((msg) => (
          <div
            key={msg.id}
            className={`flex ${msg.isUser ? "justify-end" : "justify-start"}`}
          >
            <div
              className={`max-w-[80%] rounded-lg p-3 ${
                msg.isUser
                  ? "bg-primary text-primary-foreground"
                  : "bg-accent text-accent-foreground"
              }`}
            >
              {renderMessageContent(msg)}
              <div
                className={`text-xs mt-1 ${
                  msg.isUser ? "text-primary-foreground/80" : "text-accent-foreground/80"
                }`}
              >
                {formatTime(msg.timestamp)}
              </div>
            </div>
          </div>
        ))}
      </div>

      {messages.length === 1 && (
        <div className="px-4 mb-4">
          <h3 className="text-sm font-medium mb-2">
            {activeTab === "text" ? "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–ø—Ä–æ—Å–∏—Ç—å:" : "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å:"}
          </h3>
          <div className="flex flex-wrap gap-2">
            {(activeTab === "text" ? exampleTextCommands : exampleImageCommands).map((command, index) => (
              <Button
                key={index}
                variant="outline"
                className="text-xs"
                onClick={() => useExampleCommand(command)}
              >
                {command}
              </Button>
            ))}
          </div>
        </div>
      )}

      <div className="border-t p-4">
        <div className="flex items-end gap-2">
          <Textarea
            value={input}
            onChange={(e) => setInput(e.target.value)}
            onKeyDown={handleKeyDown}
            placeholder={activeTab === "text" ? "–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..." : "–û–ø–∏—à–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å..."}
            className="min-h-[60px] resize-none"
          />
          <div className="flex flex-col gap-2">
            <Button size="icon" onClick={handleVoiceCommand}>
              <Mic className="h-4 w-4" />
            </Button>
            <Button size="icon" onClick={handleSend}>
              <Send className="h-4 w-4" />
            </Button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ChatInterface;
